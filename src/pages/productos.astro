---
import Layout from "@/layouts/Layout.astro";
---

<Layout title="Gesti√≥n de Productos - Sabor del Campo">
  <div class="max-w-6xl mx-auto p-6">
    <!-- Encabezado -->
    <header class="text-center mb-8">
      <div class="text-6xl mb-4">üì¶</div>
      <h2 class="text-4xl font-bold text-gray-800 mb-2">
        Base de Datos de Productos
      </h2>
      <p class="text-gray-600 text-lg">
        Gestiona el inventario y precios de tu tienda
      </p>
    </header>

    <!-- Add Product Form -->
    <div class="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8 mb-8">
      <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">
        Agregar Nuevo Producto
      </h2>

      <form
        id="product-form"
        class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"
      >
        <div>
          <label
            for="product-name"
            class="block text-sm font-medium text-gray-700 mb-2"
          >
            Nombre del Producto *
          </label>
          <input
            type="text"
            id="product-name"
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            placeholder="Ej: Tomate Cherry"
          />
        </div>

        <div>
          <label
            for="product-category"
            class="block text-sm font-medium text-gray-700 mb-2"
          >
            Categor√≠a
          </label>
          <select
            id="product-category"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
          >
            <option value="Frutas">Frutas</option>
            <option value="Verduras">Verduras</option>
            <option value="Granos">Granos</option>
            <option value="L√°cteos">L√°cteos</option>
            <option value="Carnes">Carnes</option>
            <option value="Otros">Otros</option>
          </select>
        </div>

        <div>
          <label
            for="product-cost"
            class="block text-sm font-medium text-gray-700 mb-2"
          >
            Precio de Costo ($) *
          </label>
          <input
            type="number"
            id="product-cost"
            step="0.01"
            min="0"
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            placeholder="0.00"
          />
        </div>

        <div>
          <label
            for="product-price"
            class="block text-sm font-medium text-gray-700 mb-2"
          >
            Precio de Venta ($) *
          </label>
          <input
            type="number"
            id="product-price"
            step="0.01"
            min="0"
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            placeholder="0.00"
          />
        </div>

        <div class="md:col-span-2 lg:col-span-4">
          <label
            for="product-description"
            class="block text-sm font-medium text-gray-700 mb-2"
          >
            Descripci√≥n
          </label>
          <textarea
            id="product-description"
            rows="2"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            placeholder="Descripci√≥n opcional del producto..."></textarea>
        </div>

        <div class="md:col-span-2 lg:col-span-4 flex justify-center space-x-4">
          <button
            type="submit"
            id="add-product-btn"
            class="bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-8 rounded-lg transition duration-200"
          >
            ‚ûï Agregar Producto
          </button>
          <button
            type="button"
            id="cancel-edit-btn"
            class="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-3 px-8 rounded-lg transition duration-200 hidden"
          >
            ‚ùå Cancelar Edici√≥n
          </button>
        </div>
      </form>
    </div>

    <!-- Search and Filter -->
    <div class="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-6 mb-8">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label
            for="search-input"
            class="block text-sm font-medium text-gray-700 mb-2"
          >
            Buscar Productos
          </label>
          <input
            type="text"
            id="search-input"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Buscar por nombre..."
          />
        </div>
        <div>
          <label
            for="filter-category"
            class="block text-sm font-medium text-gray-700 mb-2"
          >
            Filtrar por Categor√≠a
          </label>
          <select
            id="filter-category"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">Todas las categor√≠as</option>
            <option value="Frutas">Frutas</option>
            <option value="Verduras">Verduras</option>
            <option value="Granos">Granos</option>
            <option value="L√°cteos">L√°cteos</option>
            <option value="Carnes">Carnes</option>
            <option value="Otros">Otros</option>
          </select>
        </div>
        <div class="flex items-end">
          <button
            type="button"
            id="clear-filters-btn"
            class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition duration-200"
          >
            üîÑ Limpiar Filtros
          </button>
        </div>
      </div>
    </div>

    <!-- Products Table -->
    <div
      class="max-w-6xl mx-auto bg-white rounded-2xl shadow-xl overflow-hidden"
    >
      <div class="p-6 border-b border-gray-200">
        <h3 class="text-xl font-semibold text-gray-800">Lista de Productos</h3>
        <p class="text-gray-600 mt-1">
          Total de productos: <span id="products-count">0</span>
        </p>
      </div>

      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-gray-50">
            <tr>
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >Producto</th
              >
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >Categor√≠a</th
              >
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >Costo</th
              >
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >Precio</th
              >
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >Margen</th
              >
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >Acciones</th
              >
            </tr>
          </thead>
          <tbody
            id="products-table-body"
            class="bg-white divide-y divide-gray-200"
          >
            <!-- Products will be inserted here -->
          </tbody>
        </table>
      </div>

      <!-- Empty State -->
      <div id="empty-state" class="text-center py-12 hidden">
        <div class="text-6xl mb-4">üì¶</div>
        <h3 class="text-lg font-semibold text-gray-800 mb-2">
          No hay productos registrados
        </h3>
        <p class="text-gray-600">
          Agrega tu primer producto usando el formulario de arriba
        </p>
      </div>
    </div>

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mt-8 max-w-6xl mx-auto">
      <div class="bg-white rounded-lg shadow-md p-6 text-center">
        <div class="text-3xl mb-3">üìä</div>
        <h3 class="font-semibold text-gray-800 mb-2">Total Productos</h3>
        <p id="stat-total" class="text-2xl font-bold text-green-600">0</p>
      </div>
      <div class="bg-white rounded-lg shadow-md p-6 text-center">
        <div class="text-3xl mb-3">üí∞</div>
        <h3 class="font-semibold text-gray-800 mb-2">Valor Inventario</h3>
        <p id="stat-inventory" class="text-2xl font-bold text-blue-600">$0</p>
      </div>
      <div class="bg-white rounded-lg shadow-md p-6 text-center">
        <div class="text-3xl mb-3">üìà</div>
        <h3 class="font-semibold text-gray-800 mb-2">Margen Promedio</h3>
        <p id="stat-margin" class="text-2xl font-bold text-purple-600">0%</p>
      </div>
      <div class="bg-white rounded-lg shadow-md p-6 text-center">
        <div class="text-3xl mb-3">üè∑Ô∏è</div>
        <h3 class="font-semibold text-gray-800 mb-2">Categor√≠as</h3>
        <p id="stat-categories" class="text-2xl font-bold text-orange-600">0</p>
      </div>
    </div>
  </div>

  <script>
    import AuthService from "@/services/authService.js";
    import ProductService from "@/services/productService.js";

    // Verificar autenticaci√≥n al cargar la p√°gina
    if (!AuthService.isAuthenticated()) {
      window.location.href = "/login";
    }

    // Inicializar el servicio de productos
    const productService = new ProductService();

    // Clase para manejar la interfaz de usuario
    class ProductUI {
      productService;
      constructor(productService) {
        this.productService = productService;
        this.initializeEventListeners();
        this.renderProducts();
        this.updateStatistics();

        // Inicializar datos de ejemplo si es necesario
        this.productService.initializeSampleData();
        if (this.productService.getAllProducts().length > 0) {
          this.renderProducts();
          this.updateStatistics();
        }
      }

      // Guardar producto (agregar o actualizar)
      saveProduct(productData) {
        const validation = this.productService.validateProduct(productData);

        if (!validation.isValid) {
          alert(validation.errors.join("\n"));
          return;
        }

        // Advertencia si el precio es menor al costo
        if (productData.price < productData.cost) {
          if (
            !confirm("El precio de venta es menor al costo. ¬øDeseas continuar?")
          ) {
            return;
          }
        }

        if (this.productService.isEditing()) {
          // Actualizar producto existente
          this.productService.updateProduct(
            this.productService.getEditingId(),
            productData
          );
          this.productService.cancelEdit();
          document.getElementById("add-product-btn").textContent =
            "‚ûï Agregar Producto";
          document.getElementById("cancel-edit-btn").classList.add("hidden");
        } else {
          // Agregar nuevo producto
          this.productService.addProduct(productData);
        }

        this.renderProducts();
        this.updateStatistics();
        this.clearForm();
      }

      // Eliminar producto
      deleteProduct(id) {
        if (confirm("¬øEst√°s seguro de que quieres eliminar este producto?")) {
          this.productService.deleteProduct(id);
          this.renderProducts();
          this.updateStatistics();
        }
      }

      // Editar producto
      editProduct(id) {
        const product = this.productService.setEditingProduct(id);
        if (product) {
          document.getElementById("product-name").value = product.name;
          document.getElementById("product-category").value = product.category;
          document.getElementById("product-cost").value = product.cost;
          document.getElementById("product-price").value = product.price;
          document.getElementById("product-description").value =
            product.description || "";

          document.getElementById("add-product-btn").textContent =
            "‚úèÔ∏è Actualizar Producto";
          document.getElementById("cancel-edit-btn").classList.remove("hidden");

          // Scroll to form
          document
            .getElementById("product-form")
            .scrollIntoView({ behavior: "smooth" });
        }
      }

      // Cancelar edici√≥n
      cancelEdit() {
        this.productService.cancelEdit();
        document.getElementById("add-product-btn").textContent =
          "‚ûï Agregar Producto";
        document.getElementById("cancel-edit-btn").classList.add("hidden");
        this.clearForm();
      }

      // Limpiar formulario
      clearForm() {
        document.getElementById("product-form").reset();
      }

      // Filtrar productos
      filterProducts() {
        const searchTerm = document.getElementById("search-input").value;
        const categoryFilter = document.getElementById("filter-category").value;
        return this.productService.filterProducts(searchTerm, categoryFilter);
      }

      // Renderizar tabla de productos
      renderProducts() {
        const filteredProducts = this.filterProducts();
        const tbody = document.getElementById("products-table-body");
        const emptyState = document.getElementById("empty-state");
        const productsCount = document.getElementById("products-count");

        productsCount.textContent = filteredProducts.length;

        if (filteredProducts.length === 0) {
          tbody.innerHTML = "";
          emptyState.classList.remove("hidden");
          return;
        }

        emptyState.classList.add("hidden");

        tbody.innerHTML = filteredProducts
          .map((product) => {
            const margin = this.productService.calculateMargin(
              product.cost,
              product.price
            );
            const marginClass =
              margin > 30
                ? "text-green-600"
                : margin > 15
                  ? "text-yellow-600"
                  : "text-red-600";

            return `
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div>
                    <div class="text-sm font-medium text-gray-900">${product.name}</div>
                    ${product.description ? `<div class="text-sm text-gray-500">${product.description}</div>` : ""}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    ${product.category}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  ${this.productService.formatCurrency(product.cost)}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  ${this.productService.formatCurrency(product.price)}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium ${marginClass}">
                  ${margin}%
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button onclick="productUI.editProduct('${product.id}')" 
                          class="text-blue-600 hover:text-blue-900 mr-3">
                    ‚úèÔ∏è Editar
                  </button>
                  <button onclick="productUI.deleteProduct('${product.id}')" 
                          class="text-red-600 hover:text-red-900">
                    üóëÔ∏è Eliminar
                  </button>
                </td>
              </tr>
            `;
          })
          .join("");
      }

      // Actualizar estad√≠sticas
      updateStatistics() {
        const stats = this.productService.getStatistics();

        document.getElementById("stat-total").textContent = stats.totalProducts;
        document.getElementById("stat-inventory").textContent =
          this.productService.formatCurrency(stats.totalInventoryValue);
        document.getElementById("stat-margin").textContent =
          stats.averageMargin + "%";
        document.getElementById("stat-categories").textContent =
          stats.uniqueCategories;
      }

      // Inicializar event listeners
      initializeEventListeners() {
        // Env√≠o del formulario
        document
          .getElementById("product-form")
          .addEventListener("submit", (e) => {
            e.preventDefault();

            const productData = {
              name: document.getElementById("product-name").value.trim(),
              category: document.getElementById("product-category").value,
              cost:
                parseFloat(document.getElementById("product-cost").value) || 0,
              price:
                parseFloat(document.getElementById("product-price").value) || 0,
              description: document
                .getElementById("product-description")
                .value.trim(),
            };

            this.saveProduct(productData);
          });

        // Bot√≥n cancelar edici√≥n
        document
          .getElementById("cancel-edit-btn")
          .addEventListener("click", () => {
            this.cancelEdit();
          });

        // B√∫squeda y filtros
        document
          .getElementById("search-input")
          .addEventListener("input", () => {
            this.renderProducts();
          });

        document
          .getElementById("filter-category")
          .addEventListener("change", () => {
            this.renderProducts();
          });

        // Limpiar filtros
        document
          .getElementById("clear-filters-btn")
          .addEventListener("click", () => {
            document.getElementById("search-input").value = "";
            document.getElementById("filter-category").value = "";
            this.renderProducts();
          });
      }
    }

    // Inicializar la interfaz de productos
    const productUI = new ProductUI(productService);

    // Hacer la instancia global para que los botones puedan acceder a ella
    window.productUI = productUI;
  </script>
</Layout>
